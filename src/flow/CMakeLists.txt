###############################################################################
# Copyright (c) 2015-2018, Lawrence Livermore National Security, LLC.
#
# Produced at the Lawrence Livermore National Laboratory
#
# LLNL-CODE-716457
#
# All rights reserved.
#
# This file is part of Alpine.
#
# For details, see: http://ascent.readthedocs.io/.
#
# Please also read ascent/LICENSE
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# * Redistributions of source code must retain the above copyright notice,
#   this list of conditions and the disclaimer below.
#
# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the disclaimer (as noted below) in the
#   documentation and/or other materials provided with the distribution.
#
# * Neither the name of the LLNS/LLNL nor the names of its contributors may
#   be used to endorse or promote products derived from this software without
#   specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL LAWRENCE LIVERMORE NATIONAL SECURITY,
# LLC, THE U.S. DEPARTMENT OF ENERGY OR CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
###############################################################################


###############################################################################
#
# file: src/flow/CMakeLists.txt
#
###############################################################################

set(FLOW_PYTHON_ENABLED ${PYTHON_FOUND})

configure_file ("${CMAKE_CURRENT_SOURCE_DIR}/flow_config.h.in"
                "${CMAKE_CURRENT_BINARY_DIR}/flow_config.h")

set(flow_sources
    # flow interface
    flow_data.cpp
    flow_registry.cpp
    flow_filter.cpp
    flow_filters.cpp
    flow_graph.cpp
    flow_workspace.cpp
    flow_timer.cpp
    filters/flow_builtin_filters.cpp)

set(flow_headers
    flow.hpp
    flow_exports.h
    ${CMAKE_CURRENT_BINARY_DIR}/flow_config.h
    flow_data.hpp
    flow_registry.hpp
    flow_filter.hpp
    flow_filters.hpp
    flow_graph.hpp
    flow_workspace.hpp
    flow_timer.hpp
    filters/flow_builtin_filters.hpp)

set(flow_thirdparty_libs
    conduit
    conduit_relay)

#
# Flows python interpreter support enables
# running python filters when the host code
# does not provide a python interpreter
#

if(PYTHON_FOUND)
   list(APPEND flow_sources
        flow_python_interpreter.cpp
        filters/flow_python_script_filter.cpp)

   list(APPEND flow_headers
        flow_python_interpreter.hpp
        filters/flow_python_script_filter.hpp)

   # allow flow to link with python
   list(APPEND flow_thirdparty_libs python)

endif()

if(PERFSTUBS_FOUND)
    list(APPEND flow_thirdparty_libs perfstubs)
endif()

##########################################
# Build flow
##########################################

blt_add_library(
    NAME        ascent_flow
    SOURCES     ${flow_sources}
    HEADERS     ${flow_headers}
    DEPENDS_ON  ${flow_thirdparty_libs})

# install target for serial ascent lib
install(TARGETS ascent_flow
        EXPORT  ascent
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib
        RUNTIME DESTINATION lib
)

install(FILES ${flow_headers} DESTINATION include/ascent)


################################
# Add python wrappers if python
# support was selected
################################
if(PYTHON_FOUND)
    add_subdirectory(python)
endif()


